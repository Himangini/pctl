// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/weaveworks/pctl/pkg/git"
)

type FakeGit struct {
	AddStub        func() error
	addMutex       sync.RWMutex
	addArgsForCall []struct {
	}
	addReturns struct {
		result1 error
	}
	addReturnsOnCall map[int]struct {
		result1 error
	}
	CloneStub        func(string, string, string) error
	cloneMutex       sync.RWMutex
	cloneArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	cloneReturns struct {
		result1 error
	}
	cloneReturnsOnCall map[int]struct {
		result1 error
	}
	CommitStub        func() error
	commitMutex       sync.RWMutex
	commitArgsForCall []struct {
	}
	commitReturns struct {
		result1 error
	}
	commitReturnsOnCall map[int]struct {
		result1 error
	}
	CreateBranchStub        func() error
	createBranchMutex       sync.RWMutex
	createBranchArgsForCall []struct {
	}
	createBranchReturns struct {
		result1 error
	}
	createBranchReturnsOnCall map[int]struct {
		result1 error
	}
	CreateRepositoryStub        func() error
	createRepositoryMutex       sync.RWMutex
	createRepositoryArgsForCall []struct {
	}
	createRepositoryReturns struct {
		result1 error
	}
	createRepositoryReturnsOnCall map[int]struct {
		result1 error
	}
	HasChangesStub        func() (bool, error)
	hasChangesMutex       sync.RWMutex
	hasChangesArgsForCall []struct {
	}
	hasChangesReturns struct {
		result1 bool
		result2 error
	}
	hasChangesReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	IsRepositoryStub        func() error
	isRepositoryMutex       sync.RWMutex
	isRepositoryArgsForCall []struct {
	}
	isRepositoryReturns struct {
		result1 error
	}
	isRepositoryReturnsOnCall map[int]struct {
		result1 error
	}
	PushStub        func() error
	pushMutex       sync.RWMutex
	pushArgsForCall []struct {
	}
	pushReturns struct {
		result1 error
	}
	pushReturnsOnCall map[int]struct {
		result1 error
	}
	SparseCloneStub        func(string, string, string, string) error
	sparseCloneMutex       sync.RWMutex
	sparseCloneArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
	}
	sparseCloneReturns struct {
		result1 error
	}
	sparseCloneReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeGit) Add() error {
	fake.addMutex.Lock()
	ret, specificReturn := fake.addReturnsOnCall[len(fake.addArgsForCall)]
	fake.addArgsForCall = append(fake.addArgsForCall, struct {
	}{})
	stub := fake.AddStub
	fakeReturns := fake.addReturns
	fake.recordInvocation("Add", []interface{}{})
	fake.addMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeGit) AddCallCount() int {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	return len(fake.addArgsForCall)
}

func (fake *FakeGit) AddCalls(stub func() error) {
	fake.addMutex.Lock()
	defer fake.addMutex.Unlock()
	fake.AddStub = stub
}

func (fake *FakeGit) AddReturns(result1 error) {
	fake.addMutex.Lock()
	defer fake.addMutex.Unlock()
	fake.AddStub = nil
	fake.addReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGit) AddReturnsOnCall(i int, result1 error) {
	fake.addMutex.Lock()
	defer fake.addMutex.Unlock()
	fake.AddStub = nil
	if fake.addReturnsOnCall == nil {
		fake.addReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeGit) Clone(arg1 string, arg2 string, arg3 string) error {
	fake.cloneMutex.Lock()
	ret, specificReturn := fake.cloneReturnsOnCall[len(fake.cloneArgsForCall)]
	fake.cloneArgsForCall = append(fake.cloneArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.CloneStub
	fakeReturns := fake.cloneReturns
	fake.recordInvocation("Clone", []interface{}{arg1, arg2, arg3})
	fake.cloneMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeGit) CloneCallCount() int {
	fake.cloneMutex.RLock()
	defer fake.cloneMutex.RUnlock()
	return len(fake.cloneArgsForCall)
}

func (fake *FakeGit) CloneCalls(stub func(string, string, string) error) {
	fake.cloneMutex.Lock()
	defer fake.cloneMutex.Unlock()
	fake.CloneStub = stub
}

func (fake *FakeGit) CloneArgsForCall(i int) (string, string, string) {
	fake.cloneMutex.RLock()
	defer fake.cloneMutex.RUnlock()
	argsForCall := fake.cloneArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeGit) CloneReturns(result1 error) {
	fake.cloneMutex.Lock()
	defer fake.cloneMutex.Unlock()
	fake.CloneStub = nil
	fake.cloneReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGit) CloneReturnsOnCall(i int, result1 error) {
	fake.cloneMutex.Lock()
	defer fake.cloneMutex.Unlock()
	fake.CloneStub = nil
	if fake.cloneReturnsOnCall == nil {
		fake.cloneReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.cloneReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeGit) Commit() error {
	fake.commitMutex.Lock()
	ret, specificReturn := fake.commitReturnsOnCall[len(fake.commitArgsForCall)]
	fake.commitArgsForCall = append(fake.commitArgsForCall, struct {
	}{})
	stub := fake.CommitStub
	fakeReturns := fake.commitReturns
	fake.recordInvocation("Commit", []interface{}{})
	fake.commitMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeGit) CommitCallCount() int {
	fake.commitMutex.RLock()
	defer fake.commitMutex.RUnlock()
	return len(fake.commitArgsForCall)
}

func (fake *FakeGit) CommitCalls(stub func() error) {
	fake.commitMutex.Lock()
	defer fake.commitMutex.Unlock()
	fake.CommitStub = stub
}

func (fake *FakeGit) CommitReturns(result1 error) {
	fake.commitMutex.Lock()
	defer fake.commitMutex.Unlock()
	fake.CommitStub = nil
	fake.commitReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGit) CommitReturnsOnCall(i int, result1 error) {
	fake.commitMutex.Lock()
	defer fake.commitMutex.Unlock()
	fake.CommitStub = nil
	if fake.commitReturnsOnCall == nil {
		fake.commitReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.commitReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeGit) CreateBranch() error {
	fake.createBranchMutex.Lock()
	ret, specificReturn := fake.createBranchReturnsOnCall[len(fake.createBranchArgsForCall)]
	fake.createBranchArgsForCall = append(fake.createBranchArgsForCall, struct {
	}{})
	stub := fake.CreateBranchStub
	fakeReturns := fake.createBranchReturns
	fake.recordInvocation("CreateBranch", []interface{}{})
	fake.createBranchMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeGit) CreateBranchCallCount() int {
	fake.createBranchMutex.RLock()
	defer fake.createBranchMutex.RUnlock()
	return len(fake.createBranchArgsForCall)
}

func (fake *FakeGit) CreateBranchCalls(stub func() error) {
	fake.createBranchMutex.Lock()
	defer fake.createBranchMutex.Unlock()
	fake.CreateBranchStub = stub
}

func (fake *FakeGit) CreateBranchReturns(result1 error) {
	fake.createBranchMutex.Lock()
	defer fake.createBranchMutex.Unlock()
	fake.CreateBranchStub = nil
	fake.createBranchReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGit) CreateBranchReturnsOnCall(i int, result1 error) {
	fake.createBranchMutex.Lock()
	defer fake.createBranchMutex.Unlock()
	fake.CreateBranchStub = nil
	if fake.createBranchReturnsOnCall == nil {
		fake.createBranchReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createBranchReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeGit) CreateRepository() error {
	fake.createRepositoryMutex.Lock()
	ret, specificReturn := fake.createRepositoryReturnsOnCall[len(fake.createRepositoryArgsForCall)]
	fake.createRepositoryArgsForCall = append(fake.createRepositoryArgsForCall, struct {
	}{})
	stub := fake.CreateRepositoryStub
	fakeReturns := fake.createRepositoryReturns
	fake.recordInvocation("CreateRepository", []interface{}{})
	fake.createRepositoryMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeGit) CreateRepositoryCallCount() int {
	fake.createRepositoryMutex.RLock()
	defer fake.createRepositoryMutex.RUnlock()
	return len(fake.createRepositoryArgsForCall)
}

func (fake *FakeGit) CreateRepositoryCalls(stub func() error) {
	fake.createRepositoryMutex.Lock()
	defer fake.createRepositoryMutex.Unlock()
	fake.CreateRepositoryStub = stub
}

func (fake *FakeGit) CreateRepositoryReturns(result1 error) {
	fake.createRepositoryMutex.Lock()
	defer fake.createRepositoryMutex.Unlock()
	fake.CreateRepositoryStub = nil
	fake.createRepositoryReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGit) CreateRepositoryReturnsOnCall(i int, result1 error) {
	fake.createRepositoryMutex.Lock()
	defer fake.createRepositoryMutex.Unlock()
	fake.CreateRepositoryStub = nil
	if fake.createRepositoryReturnsOnCall == nil {
		fake.createRepositoryReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createRepositoryReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeGit) HasChanges() (bool, error) {
	fake.hasChangesMutex.Lock()
	ret, specificReturn := fake.hasChangesReturnsOnCall[len(fake.hasChangesArgsForCall)]
	fake.hasChangesArgsForCall = append(fake.hasChangesArgsForCall, struct {
	}{})
	stub := fake.HasChangesStub
	fakeReturns := fake.hasChangesReturns
	fake.recordInvocation("HasChanges", []interface{}{})
	fake.hasChangesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeGit) HasChangesCallCount() int {
	fake.hasChangesMutex.RLock()
	defer fake.hasChangesMutex.RUnlock()
	return len(fake.hasChangesArgsForCall)
}

func (fake *FakeGit) HasChangesCalls(stub func() (bool, error)) {
	fake.hasChangesMutex.Lock()
	defer fake.hasChangesMutex.Unlock()
	fake.HasChangesStub = stub
}

func (fake *FakeGit) HasChangesReturns(result1 bool, result2 error) {
	fake.hasChangesMutex.Lock()
	defer fake.hasChangesMutex.Unlock()
	fake.HasChangesStub = nil
	fake.hasChangesReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeGit) HasChangesReturnsOnCall(i int, result1 bool, result2 error) {
	fake.hasChangesMutex.Lock()
	defer fake.hasChangesMutex.Unlock()
	fake.HasChangesStub = nil
	if fake.hasChangesReturnsOnCall == nil {
		fake.hasChangesReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.hasChangesReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeGit) IsRepository() error {
	fake.isRepositoryMutex.Lock()
	ret, specificReturn := fake.isRepositoryReturnsOnCall[len(fake.isRepositoryArgsForCall)]
	fake.isRepositoryArgsForCall = append(fake.isRepositoryArgsForCall, struct {
	}{})
	stub := fake.IsRepositoryStub
	fakeReturns := fake.isRepositoryReturns
	fake.recordInvocation("IsRepository", []interface{}{})
	fake.isRepositoryMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeGit) IsRepositoryCallCount() int {
	fake.isRepositoryMutex.RLock()
	defer fake.isRepositoryMutex.RUnlock()
	return len(fake.isRepositoryArgsForCall)
}

func (fake *FakeGit) IsRepositoryCalls(stub func() error) {
	fake.isRepositoryMutex.Lock()
	defer fake.isRepositoryMutex.Unlock()
	fake.IsRepositoryStub = stub
}

func (fake *FakeGit) IsRepositoryReturns(result1 error) {
	fake.isRepositoryMutex.Lock()
	defer fake.isRepositoryMutex.Unlock()
	fake.IsRepositoryStub = nil
	fake.isRepositoryReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGit) IsRepositoryReturnsOnCall(i int, result1 error) {
	fake.isRepositoryMutex.Lock()
	defer fake.isRepositoryMutex.Unlock()
	fake.IsRepositoryStub = nil
	if fake.isRepositoryReturnsOnCall == nil {
		fake.isRepositoryReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.isRepositoryReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeGit) Push() error {
	fake.pushMutex.Lock()
	ret, specificReturn := fake.pushReturnsOnCall[len(fake.pushArgsForCall)]
	fake.pushArgsForCall = append(fake.pushArgsForCall, struct {
	}{})
	stub := fake.PushStub
	fakeReturns := fake.pushReturns
	fake.recordInvocation("Push", []interface{}{})
	fake.pushMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeGit) PushCallCount() int {
	fake.pushMutex.RLock()
	defer fake.pushMutex.RUnlock()
	return len(fake.pushArgsForCall)
}

func (fake *FakeGit) PushCalls(stub func() error) {
	fake.pushMutex.Lock()
	defer fake.pushMutex.Unlock()
	fake.PushStub = stub
}

func (fake *FakeGit) PushReturns(result1 error) {
	fake.pushMutex.Lock()
	defer fake.pushMutex.Unlock()
	fake.PushStub = nil
	fake.pushReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGit) PushReturnsOnCall(i int, result1 error) {
	fake.pushMutex.Lock()
	defer fake.pushMutex.Unlock()
	fake.PushStub = nil
	if fake.pushReturnsOnCall == nil {
		fake.pushReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.pushReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeGit) SparseClone(arg1 string, arg2 string, arg3 string, arg4 string) error {
	fake.sparseCloneMutex.Lock()
	ret, specificReturn := fake.sparseCloneReturnsOnCall[len(fake.sparseCloneArgsForCall)]
	fake.sparseCloneArgsForCall = append(fake.sparseCloneArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.SparseCloneStub
	fakeReturns := fake.sparseCloneReturns
	fake.recordInvocation("SparseClone", []interface{}{arg1, arg2, arg3, arg4})
	fake.sparseCloneMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeGit) SparseCloneCallCount() int {
	fake.sparseCloneMutex.RLock()
	defer fake.sparseCloneMutex.RUnlock()
	return len(fake.sparseCloneArgsForCall)
}

func (fake *FakeGit) SparseCloneCalls(stub func(string, string, string, string) error) {
	fake.sparseCloneMutex.Lock()
	defer fake.sparseCloneMutex.Unlock()
	fake.SparseCloneStub = stub
}

func (fake *FakeGit) SparseCloneArgsForCall(i int) (string, string, string, string) {
	fake.sparseCloneMutex.RLock()
	defer fake.sparseCloneMutex.RUnlock()
	argsForCall := fake.sparseCloneArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeGit) SparseCloneReturns(result1 error) {
	fake.sparseCloneMutex.Lock()
	defer fake.sparseCloneMutex.Unlock()
	fake.SparseCloneStub = nil
	fake.sparseCloneReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGit) SparseCloneReturnsOnCall(i int, result1 error) {
	fake.sparseCloneMutex.Lock()
	defer fake.sparseCloneMutex.Unlock()
	fake.SparseCloneStub = nil
	if fake.sparseCloneReturnsOnCall == nil {
		fake.sparseCloneReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.sparseCloneReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeGit) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	fake.cloneMutex.RLock()
	defer fake.cloneMutex.RUnlock()
	fake.commitMutex.RLock()
	defer fake.commitMutex.RUnlock()
	fake.createBranchMutex.RLock()
	defer fake.createBranchMutex.RUnlock()
	fake.createRepositoryMutex.RLock()
	defer fake.createRepositoryMutex.RUnlock()
	fake.hasChangesMutex.RLock()
	defer fake.hasChangesMutex.RUnlock()
	fake.isRepositoryMutex.RLock()
	defer fake.isRepositoryMutex.RUnlock()
	fake.pushMutex.RLock()
	defer fake.pushMutex.RUnlock()
	fake.sparseCloneMutex.RLock()
	defer fake.sparseCloneMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeGit) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ git.Git = new(FakeGit)
